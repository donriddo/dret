// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const proof = require('../zokrates/code/square/proof.json');
const Verifier = artifacts.require('Verifier');


contract('SolnSquareVerifier', accounts => {

  describe('solutions submission', function () {
    beforeEach(async function () {
      this.contract = await Verifier.new({ from: accounts[0] });
    })

    // Test verification with incorrect proof
    it('should reject solution: incorrect', async function () {
      const isCorrect = await this.contract.verifyTx(
        proof.proof.a,
        proof.proof.b,
        proof.proof.c,
        [0, 0],
        { from: accounts[0] }
      );

      assert.equal(isCorrect, false);
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('should accept solution: correct', async function () {
      const isCorrect = await this.contract.verifyTx(
        proof.proof.a,
        proof.proof.b,
        proof.proof.c,
        proof.inputs,
        { from: accounts[0] }
      );

      assert.equal(isCorrect, true);
    });
  });
});
